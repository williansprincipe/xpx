// Plot2D.cc
// Plot2D object implementation
// wpfernandes 2015-10-20 18h00min

#include "Plot2D.h"
#include "Region.h"
#include "Post.h"
#include "util.h"

#include "Poco/Path.h"
#include <fstream>
#include <iomanip>

ctrlEnum Plot2D::script_file_path_parse(std::string script_file_path_string)
{ if (!script_file_path_.tryParse(script_file_path_string))
  { post.err << "Error. Poco::Path::tryParse unable to parse \""
             << script_file_path_string
             << "\" at Plot2D::script_file_path_parse"
             << "(std::string script_file_path_string) member function.\n";
    return ERR_POCO_PARSE_STRING_FAILED;
  }
  script_file_path_.parse(script_file_path_string);
  if (script_extension().empty())
  { script_extension(settings("script_file_extension_for_plot_program_" +
                              settings("plot_program")));
  }
  return SUCCESS;
}

ctrlEnum Plot2D::data_file_path_parse(std::string data_file_path_string)
{ if (!data_file_path_.tryParse(data_file_path_string))
  { post.err << "Error. Poco::Path::tryParse unable to parse \""
             << data_file_path_string
             << "\" at Plot2D::data_file_path_parse"
             << "(std::string data_file_path_string) member function.\n";
    return ERR_POCO_PARSE_STRING_FAILED;
  }
  data_file_path_.parse(data_file_path_string);
  if (data_extension().empty())
  { data_extension(settings("data_file_extension_for_plot_program_" +
                            settings("plot_program")));
  }
  return SUCCESS;
}

ctrlEnum Plot2D::writeScriptHeader(std::ofstream& ofs)
{ ofs << "# " + script_file_path_toString() + "\n";
  ofs << "# XPS plot generated by the program XPS version 0.02.\n";
  ofs << "# Data source file name: " << source_file_name() << ".\n";
  ofs << "# Region number (1-based): " << region_number() << ".\n";
  ofs << "# Region label: " << label() << ".\n";
  ofs << "#\n";
  if (reversed())
  { ofs << "set xrange reversed;\n";
  }
  ofs << "#set yrange [0:250000];\n";
  ofs << "set terminal " << 
    settings("terminal_for_image_type_"+settings("image_type")+"_for_plot_program_"+settings("plot_program")) << ";\n";
  ofs << "set output '" << image_file_name() << "';\n";
  ofs << "set xlabel 'Energia de liga\\\\c{c}\\~{a}o por eV';\n";
  ofs << "set ylabel 'Contagens por segundo';\n";
  return SUCCESS;
}

ctrlEnum Plot2D::writeScript(std::ofstream& ofs)
{ writeScriptHeader(ofs);
  vsz_t i = 0;
  std::string a_data_file_name;
  ofs << "plot";
  vsz_t n_data_sequences = sequences_to_plot_.size(); // can change bellow
  for (auto s_index : sequences_to_plot_)
  { if (s_index == 0) // signal to plot fitted exp function plot rather than x
    { ofs << ' ' << sequences().A() << " * exp(-1.0 / 2.0 * (x - "
          << sequences().mu() << ") ** 2 / " << sequences().sigma()
          << " ** 2) title '" << sequences().area() << "',";
      n_data_sequences -= 1; // one sequence is function
      continue;
    }
    ++i;
    if (settings("write_mode") == "only_script" ||
        settings("write_mode") == "script_and_data")
    { a_data_file_name = (i == 1 ? data_file_name() : "''");
    }
    else
    { a_data_file_name = "--";
    }
    auto& s_name = sequences().name(s_index);
    ofs << " '" << a_data_file_name << "'";
    if (settings("write_mode") != "script_with_embedded_data")
    { ofs << " using 1:" << i + 1;
    }
    ofs << " with points title '" << s_name.substr(0,1) << "'";
    ofs << (i < n_data_sequences ? "," : ";\n");
  }
  return SUCCESS;
}

ctrlEnum Plot2D::writeData(std::ofstream& ofs)
{ auto& m = sequences().values_matrix();
  auto& p = sequences_to_plot_;
  ofs << std::fixed;
  for (vsz_t i = 0; i < m.size(); ++i)
  { ofs << std::setw(10) << std::setprecision(4) << m[i][0] << "  "; // seq_0
    vsz_t n_data_sequences = p.size(); // can change bellow
    for (vsz_t j = 0; j < p.size(); ++j)
    { if (p[j] == 0)
      { n_data_sequences -= 1; // one sequence is function
      }
      else
      { ofs << std::setw(10) << std::setprecision(4) << m[i][p[j]];
        if (j < n_data_sequences - 1)
        { ofs << "  ";
        }
      }
    }
    ofs << "\n";
  }
  return (ofs ? SUCCESS : ERR_FILE_WRITING);
}

ctrlEnum Plot2D::writeEmbeddedData(std::ofstream& ofs)
{ auto& m = sequences().values_matrix();
  auto& p = sequences_to_plot_;
  ofs << std::fixed;
  for (vsz_t j = 0; j < p.size(); ++j)
  { if (p[j] != 0)
    { for (vsz_t i = 0; i < m.size(); ++i)
      { ofs << std::setw(10) << std::setprecision(4)
            << m[i][0] << "  " << m[i][p[j]] << '\n';
      }
      ofs << "END\n";
    }
  }
  return (ofs ? SUCCESS : ERR_FILE_WRITING);
}

ctrlEnum Plot2D::writePlot()
{ if (settings("write_mode") == "only_script"
   || settings("write_mode") == "script_and_data"
   || settings("write_mode") == "script_with_embedded_data")
  { std::ofstream ofs(script_file_path_toString());
    if (!ofs.is_open())
    { post.err << "Error. Unable to open file \"" << script_file_path_toString()
               << "\" when to write plot script.\n"; // maybe script and data
      return ERR_UNABLE_TO_OPEN_OUTPUT_SCRIPT_FILE;
    }
    writeScript(ofs);
    if (settings("write_mode") == "script_with_embedded_data")
    { writeEmbeddedData(ofs);
    }
  }
  if (settings("write_mode") == "only_data"
   || settings("write_mode") == "script_and_data")
  { std::ofstream ofs(data_file_path_toString());
    if (!ofs.is_open())
    { post.err << "Error. Unable to open file \"" << script_file_path_toString()
               << "\" when to write plot data.\n";
      return ERR_UNABLE_TO_OPEN_OUTPUT_DATA_FILE;
    }
    writeData(ofs);
  }
  return SUCCESS;
}

ctrlEnum Plot2D::writePlotAs(const std::string& file_name)
{ this->script_file_name(file_name);
  this->data_file_name(file_name);
  return writePlot();
}
